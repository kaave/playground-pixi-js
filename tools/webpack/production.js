const path = require('path');
const webpack = require('webpack');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const { default: ImageminPlugin } = require('imagemin-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const imageminMozjpeg = require('imagemin-mozjpeg');

const { entry, output, resolve, module: { rules }, plugins, views, paths, imageMin, viewData } = require('./base');

const appendRules = [
  {
    test: /\.css$/,
    use: ExtractTextPlugin.extract({
      fallback: 'style-loader',
      use: [
        {
          loader: 'css-loader',
          options: {
            importLoaders: 1
          }
        },
        'postcss-loader',
      ],
    }),
  },
];

module.exports = {
  mode: 'production',
  entry,
  output,
  resolve,
  plugins: [
    ...plugins,
    new CopyWebpackPlugin(
      [{ from: paths.assets }],
      { ignore: [
        '.DS_Store',
      ] }
    ),
    new ImageminPlugin({
      test: /.{jpg,gif,png}$/,
      optipng: null,
      jpegtran: null,
      gifsicle: imageMin.gif,
      pngquant: imageMin.png,
      plugins: [
        imageminMozjpeg(imageMin.jpg),
      ],
    }),
    new ExtractTextPlugin('css/[name].css'),
    ...views.map(({ template, filename }) => new HtmlWebpackPlugin({
      template,
      filename: `${filename}.html`,
      inject: false,
      minify: {
        html5: true,
        includeAutoGeneratedTags: true,
        collapseWhitespace: true
      },
      conf: Object.assign({ viewPath: paths.view, isProduction: true }, viewData.common, viewData[filename] ? viewData[filename] : {}),
    })),
  ],
  module: {
    rules: [...rules, ...appendRules],
  },
};

